package old;

/**
 * Created by SCIP on 23.05.2016.
 */
public class Main {
    public static void main(String[] args) {
        Task task = new Task();


        /**
         * 1.     Створити програму, що перевіряє і повідомляє на екран, чи є ціле число записане в змінну n, парним або непарним.
         * */
        task.task1();

        /**
         * Створити програму, що виводить на екран найближче до 10 з двох чисел, записаних в змінні m і n. Наприклад, серед чисел 8,5 і 11,45 найближче до десяти 11,45.
         * */
        task.task2();

        /**
         *У три змінні a, b і c записані три дійсних числа. Створити програму, яка буде знаходити і виводити
         * на екран речові коріння квадратного рівняння ax² + bx + c = 0, або повідомляти, що коріння немає.
         * */
        task.task3();

        /**
         * Створіть програму, що виводить на екран всі чотиризначні числа послідовності 1000 1003 1006 1009 1012 1015.
         * */
        task.task4();

        /**
         * Створіть програму, що виводить на екран перші 55 елементів послідовності 1 3 5 7 9 11 13 15 17 ....
         * */
        task.task5();

        /**
         * Створіть програму, що виводить на екран всі невід'ємні елементи послідовності 90 85 80 75 70 65 60 ....
         * */
        task.task6();

        /**
         * Створіть програму, що виводить на екран перші 20 елементів послідовності 2 4 8 16 32 64 128 ....
         * */
        task.task7();

        /**
         * Виведіть на екран всі числа в послідовності 2a-1, де a1 = 2, які менше 10000.
         * */
        task.task8();

        /**
         * Виведіть на екран всі двозначні члени послідовності 2a+200, де a1 = -166.
         * */
        task.task9();

        /**
         * Створіть програму, яка обчислює факторіал натурального числа n, яке користувач введе з клавіатури.
         * */
        /* task.task10(); */

        /***
         * Виведіть на екран всі позитивні подільники натурального числа, введеного користувачем з клавіатури.
         */
        /* task.task11(); */

        /**
         * Перевірте, чи є число записане в змінну n натуральне число - простим. Постарайтеся не виконувати зайвих дій
         * (наприклад, після того, як ви знайшли хоча б один нетривіальний дільник вже ясно, що число складене і перевірку продовжувати не потрібно).
         * Також врахуйте, що найменший дільник натурального числа n, якщо він взагалі є, обов'язково розташовується в відрізку [2; √n].
         * */
        /*task.task12();*/

        /**
         * Створіть програму, що виводить на екран 12 перших елементів послідовності з кроком 2an-2, де a1 = 3 і a2 = 2.
         */
        task.task13();

        /***
         * Виведіть на екран перші 11 членів послідовності Фібоначчі. Нагадуємо, що перший і другий члени послідовності рівні одиницям, а кожен наступний - сумою двох попередніх.
         * */
        task.task14();

        /**
         * Для записаного в змінну n натурального числа порахуйте суму всіх його цифр (заздалегідь не відомо скільки цифр буде в числі).
         * */
        task.task15();

        /**
         *  написати метод static double rendom(int from, int to){ повинен повертати рандомне значення в межах які задаються при виклику
         *  метода через змінні фром і ту, наприклад double random = random(3, 10); в змінній дабл рандом повинно бути значення від 3 до 10,
         *  воно генерується при кожному запуску тому не завжди буде одинаковим, перевірте.
         *  */
        double random = task.task16(10, 15);
        System.out.println(random);
        task.getSeparator();

        /**
         *  Створіть масив з усіх парних чисел від 2 до 20 і виведіть елементи масиву на екран спочатку в рядок, відокремлюючи
         *  один елемент від іншого прогалиною, а потім в стовпчик (відокремлюючи один елемент від іншого початком нового рядка).
         *  Перед створенням масиву подумайте, якого він буде розміру.
         *  */
        task.taskArray1();

        /**
         *  Створіть масив з усіх непарних чисел від 1 до 99, виведіть його на екран у рядок, а потім цей же масив виведіть
         *  на екран теж в рядок, але в зворотному порядку (99 97 95 93 ... 7 5 3 1). */
        task.taskArray2();

        /**
         * Створіть масив з 15 випадкових цілих чисел з відрізка [0; 9]. Виведіть масив на екран.
         * Підрахуйте скільки в масиві парних елементів і виведете цю кількість на екран на окремому рядку.
         * */
        task.taskArray3();

        /**
         * Створіть масив з 8 випадкових цілих чисел з відрізка [1; 10]. Виведіть масив на екран у рядок.
         * Замініть кожен елемент з непарним індексом на нуль. Знову виведете масив на екран на окремому рядку.
         * */
        task.taskArray4();

        /**
         * Створіть 2 масиви з 5 випадкових цілих чисел з відрізка [0; 5] кожен, виведіть масиви на екран у двох окремих рядках.
         * Порахуйте середнє арифметичне елементів кожного масиву і повідомте, для якого з масивів це значення виявилося більше (або повідомте, що їх середні арифметичні рівні).
         * */
        task.taskArray5();

        /**
         * Створіть масив з 4 випадкових цілих чисел з відрізка [10; 99], виведіть його на екран у рядок.
         * Визначити і вивести на екран повідомлення про те, чи є масив строго зростаючої послідовністю.
         * */
        task.taskArray6();

        /**
         *  Створіть масив з 20-ти перших чисел Фібоначчі і виведіть його на екран. Нагадуємо, що перший і другий члени послідовності рівні одиницям, а кожен наступний - сумою двох попередніх.
         *  */
        task.taskArray7();

        /**
         *  Створіть масив з 12 випадкових цілих чисел з відрізка [-15; 15]. Визначте який елемент є в цьому масиві максимальним і повідомте індекс його останнього входження в масив.
         *  */
        task.taskArray8();

        /**
         * Створіть два масиви з 10 цілих випадкових чисел з відрізка [1; 9] і третій масив з 10 дійсних чисел.
         * Кожен елемент з i-им індексом третього масиву повинен дорівнювати відношенню елементу з першого масиву з i-им індексом
         * до елементу з другого масиву з i-им індексом. Вивести всі три масиву на екран (кожен на окремому рядку), потім вивести кількість цілих елементів в третьому масиві.
         * */
        task.taskArray9();

        /**
         * Створіть масив з 11 випадкових цілих чисел з відрізка [-1; 1], виведіть масив на екран у рядок.
         * Визначте який елемент зустрічається в масиві найчастіше і виведіть про це повідомлення на екран.
         * Якщо два якихось елемента зустрічаються однакову кількість разів, то не виводьте нічого. */
        task.taskArray10();
    }
}
